# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT

# alpha-release.yml - releasing CWA  artifacts for customers and will be safe to deleted after Alpha release etc.
name: Alpha Release
env:
  TERRAFORM_AWS_ASSUME_ROLE: ${{ secrets.TERRAFORM_AWS_ASSUME_ROLE }}
  S3_INTEGRATION_BUCKET: ${{ secrets.S3_INTEGRATION_BUCKET }}
  KEY_NAME: ${{ secrets.KEY_NAME }}
  CWA_GITHUB_TEST_REPO_NAME: "aws/amazon-cloudwatch-agent-test"
  CWA_GITHUB_TEST_REPO_URL: "https://github.com/aws/amazon-cloudwatch-agent-test.git"
  CWA_GITHUB_TEST_REPO_BRANCH: "main"

on:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  UploadRelease:
    name: "UploadRelease"
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ~1.19.2

      - name: Cache go
        id: cached_go
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: v1-go-pkg-mod-${{ runner.os }}-${{ hashFiles('**/go.sum') }}

      # Required to build rpm again to reset cw agent version to new tag version
      - name: Build RPM
        run: make build package-rpm

      - name: Check current release version against new version and ensure they are different
        run: |
          aws s3 cp s3://${S3_INTEGRATION_BUCKET}/release/CWAGENT_VERSION /tmp/
          current_val=`cat /tmp/CWAGENT_VERSION`
          new_val=`cat build/bin/CWAGENT_VERSION`
          if [ "$current_val" = "$new_val" ]; then
            echo "This version has already been published. Do nothing."
            exit 1
          fi          

      - name: Copy RPM To Release
        run: |
          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/CWAGENT_VERSION s3://${S3_INTEGRATION_BUCKET}/release/CWAGENT_VERSION

      - name: Copy RPM To Tag
        run: |
          export tag=$(cat build/bin/CWAGENT_VERSION)
          aws s3 cp build/bin/linux/amd64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/${tag}/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/linux/arm64/amazon-cloudwatch-agent.rpm s3://${S3_INTEGRATION_BUCKET}/release/${tag}/amazon_linux/arm64/latest/amazon-cloudwatch-agent.rpm
          aws s3 cp build/bin/CWAGENT_VERSION s3://${S3_INTEGRATION_BUCKET}/release/${tag}/CWAGENT_VERSION      

  # Assume we do not run 2 releases at the same time
  DeployCanary:
    needs: [ UploadRelease]
    name: "DeployCanary"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{env.CWA_GITHUB_TEST_REPO_NAME}}
          ref: ${{env.CWA_GITHUB_TEST_REPO_BRANCH}}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.TERRAFORM_AWS_ASSUME_ROLE }}
          aws-region: us-west-2

      - name: Terminate Last Canary
        run: |
          if aws s3api wait object-exists --bucket ${S3_INTEGRATION_BUCKET} --key canary/al2/terraform.tfstate ;
          then 
            cd terraform/ec2/linux
            aws s3 cp s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate .
            terraform --version
            terraform init
            terraform destroy -auto-approve
            aws s3api delete-object --bucket ${S3_INTEGRATION_BUCKET} --key canary/al2/terraform.tfstate
          fi

      # @TODO we can add a matrix in the future but for alpha we will only deploy to al2
      - name: Terraform apply
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 60
          retry_wait_seconds: 5
          command: |
            cd terraform/ec2/linux
            terraform init
            if terraform apply --auto-approve \
              -var="cwa_github_sha=${GITHUB_SHA}" \
              -var="ssh_key_value=${PRIVATE_KEY}" -var="github_test_repo=${{env.CWA_GITHUB_TEST_REPO_URL}}" \
              -var="github_test_repo_branch=${{env.CWA_GITHUB_TEST_REPO_BRANCH}}" \
              -var="user=ec2-user" \
              -var="ami=cloudwatch-agent-integration-test-al2*" \
              -var="ca_cert_path=/etc/ssl/certs/ca-bundle.crt" \
              -var="arc=amd64" \
              -var="binary_name=amazon-cloudwatch-agent.rpm" \
              -var="s3_bucket=${S3_INTEGRATION_BUCKET}" \
              -var="ssh_key_name=${KEY_NAME}" \
              -var="test_name=canary" \
              -var="is_canary=true" \
              -var="test_dir=./test/canary" ; then aws s3 cp terraform.tfstate s3://${S3_INTEGRATION_BUCKET}/canary/al2/terraform.tfstate
            else
              terraform destroy -auto-approve && exit 1
            fi

      #This is here just in case workflow cancel
      - name: Terraform destroy
        if: ${{ cancelled() }}
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 8
          retry_wait_seconds: 5
          command: cd terraform/ec2/linux && terraform destroy --auto-approve